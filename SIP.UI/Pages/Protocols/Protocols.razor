@page "/protocols"

@using SIP.UI.Components.Dialogs.Protocols
@using SIP.UI.Domain.DTOs.Protocols.Responses
@using SIP.UI.Domain.Services.Protocols
@using SIP.UI.Models.Protocols
@using SIP.UI.Models.Users
@using SIP.UI.Models.Sectors
@using MudBlazor
@using MudBlazor.Utilities

@inject ProtocolService _protocolService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large" Class="my-8 px-4">
    <MudStack Row="true" AlignItems="AlignItems.Stretch" Class="mb-3 ml-3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddDialog" Class="@GetButtonClass()">
            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Medium" />
            <span class="button-text-label">Novo Protocolo</span>
        </MudButton>
    </MudStack>

    <MudPaper Class="pa-4 ma-2" Elevation="1">
        <MudTable T="Protocol" ServerData="LoadServerData" Dense="true" Hover="true" Bordered="false" @ref="table" RowsPerPage="pageSize" LoadingProgressColor="Color.Primary" SortLabel="sortLabel" Loading="@isLoading" Elevation="0" MultiSelection="true" @bind-SelectedItems="_selectedProtocols">
            <ToolBarContent>
                <MudStack Style="width: 100%; margin-left: -0.75rem;" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @if (_selectedProtocols.Any())
                        {
                            <MudTooltip Text="@($"Ações aplicáveis para {_selectedProtocols.Count} protocolo(s) selecionado(s)")" Arrow="true" Placement="Placement.Bottom">
                                <MudMenu Dense="true" Icon="@Icons.Material.Filled.SettingsApplications" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                                    @if (_selectedProtocols.Count == 1)
                                    {
                                        <MudMenuItem OnClick="@(() => ShowEditDialog(_selectedProtocols.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Editar</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudDivider Class="my-2" />
                                        <MudMenuItem OnClick="@(() => ShowDeleteDialog(_selectedProtocols.First()))" Style="color: var(--mud-palette-error);">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Excluir</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                    }
                                    @if (_selectedProtocols.Count > 1)
                                    {
                                        <MudMenuItem OnClick="ShowDeleteSelectedProtocolsDialog" Style="color: var(--mud-palette-error);">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Excluir</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </MudTooltip>
                        }
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudTextField T="string" ValueChanged="@OnSearch" Immediate="false" DebounceInterval="300" Placeholder="digite sua busca..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="m-auto" Clearable="true" Style="max-width: 300px;" />
                        <MudTooltip Text="Exportar para formatos compatíveis ..." Arrow="true" Placement="Placement.Bottom">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                                <MudMenuItem OnClick="ExportToCsv">Exportar CSV</MudMenuItem>
                                <MudMenuItem OnClick="ExportToPdf">Exportar PDF</MudMenuItem>
                            </MudMenu>
                        </MudTooltip>
                    </MudStack>
                </MudStack>
            </ToolBarContent>

            <HeaderContent>
                <MudTh Style="font-weight: bold;">Número</MudTh>
                <MudTh Style="font-weight: bold;">Criado Por</MudTh>
                <MudTh Style="font-weight: bold;">Setor Destino</MudTh>
                <MudTh Style="font-weight: bold;">Data de Criação</MudTh>
            </HeaderContent>

            <RowTemplate Context="protocol">
                <MudTd DataLabel="Número">@protocol.Number</MudTd>
                <MudTd DataLabel="Criado Por">@protocol.CreatedBy?.FullName</MudTd>
                <MudTd DataLabel="Setor Destino">@protocol.DestinationSector?.Acronym</MudTd>
                <MudTd DataLabel="Data de Criação">@protocol.CreatedAt.ToString("dd/MM/yyyy HH:mm")</MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Class="pa-6 text-center mud-text-secondary">Nenhum protocolo encontrado para exibir.</MudText>
            </NoRecordsContent>

            <LoadingContent>
                <MudText Class="pa-6 text-center mud-text-secondary">Carregando protocolos, por favor aguarde...</MudText>
            </LoadingContent>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 15, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private MudTable<Protocol>? table;
    private bool isLoading = false;
    private int pageSize = 15;
    private int totalItems = 0;
    private string searchString = string.Empty;
    private string? lastSortLabel;
    private bool _isModalOpen = false;

    private HashSet<Protocol> _selectedProtocols = new();

    private string GetButtonClass() =>
        $"mud-elevation-3 animated-fab-button-manual-icon {(_isModalOpen ? "force-expanded-button" : "")}";

    protected override void OnInitialized() =>
        _selectedProtocols.Clear();

    private async Task<TableData<Protocol>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        isLoading = true;
        StateHasChanged();

        _selectedProtocols.Clear();

        pageSize = state.PageSize;
        string? sortLabel = state.SortLabel;

        if (string.IsNullOrWhiteSpace(sortLabel))
        {
            if (state.SortDirection != SortDirection.None)
                sortLabel = lastSortLabel ?? "CreatedAt";
            else
                sortLabel = "CreatedAt";
        }

        lastSortLabel = sortLabel;

        try
        {
            ProtocolPagedResultDTO protocols = await _protocolService.GetPagedProtocolsAsync(
                state.Page + 1,
                state.PageSize,
                sortLabel,
                GetSortDirectionString(state.SortDirection),
                searchString);

            totalItems = await _protocolService.GetTotalProtocolsCountAsync(searchString);

            return new TableData<Protocol>
            {
                Items = protocols.Items,
                TotalItems = protocols.TotalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados: {ex.Message}", Severity.Error);
            return new TableData<Protocol> { Items = [], TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetSortDirectionString(SortDirection direction) =>
        direction switch
        {
            SortDirection.Ascending => "asc",
            SortDirection.Descending => "desc",
            _ => string.Empty
        };

    private async Task OnSearch(string value)
    {
        searchString = value;
        if (table is not null)
            await table.ReloadServerData();
    }

    private async Task ShowAddDialog()
    {
        _isModalOpen = true;

        DialogParameters<ProtocolEditDialog> parameters = new();
        parameters.Add(x => x.Protocol, new Protocol { Id = Guid.Empty });
        IDialogReference dialog = await DialogService.ShowAsync<ProtocolEditDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        _isModalOpen = false;

        if (result is not null && !result.Canceled)
        {
            Protocol? savedProtocol = result.Data as Protocol;

            if (savedProtocol != null)
            {
                try
                {
                    await _protocolService.CreateProtocolAsync(savedProtocol);
                    Snackbar.Add("Protocolo criado com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao criar protocolo: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Inserção de protocolo cancelada.", Severity.Info);
        }
    }

    private async Task ShowEditDialog(Protocol protocol)
    {
        DialogParameters<ProtocolEditDialog> parameters = new();
        parameters.Add(x => x.Protocol, new Protocol
        {
            Id = protocol.Id,
            Number = protocol.Number,
            Subject = protocol.Subject,
            CreatedById = protocol.CreatedById,
            DestinationSectorId = protocol.DestinationSectorId,
            CreatedAt = protocol.CreatedAt,
            UpdatedAt = protocol.UpdatedAt
        });

        IDialogReference dialog = await DialogService.ShowAsync<ProtocolEditDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            Protocol? updatedProtocol = result.Data as Protocol;

            if (updatedProtocol != null)
            {
                try
                {
                    await _protocolService.UpdateProtocolAsync(updatedProtocol);
                    Snackbar.Add("Protocolo atualizado com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao atualizar protocolo: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Edição de protocolo cancelada.", Severity.Info);
        }
    }

    private async Task ShowDeleteDialog(Protocol protocol)
    {
        DialogParameters<ProtocolDeleteDialog> parameters = new();
        parameters.Add(x => x.ProtocolToDelete, protocol);

        IDialogReference dialog = await DialogService.ShowAsync<ProtocolDeleteDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                await _protocolService.DeleteProtocolAsync(protocol.Id);
                Snackbar.Add("Protocolo excluído com sucesso!", Severity.Success);
                if (table is not null)
                    await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir protocolo: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Exclusão de protocolo cancelada.", Severity.Info);
        }
    }

    private void ShowDeleteSelectedProtocolsDialog()
    {
        Snackbar.Add("A Exclusão de múltiplos registros ainda não foi implementada.", Severity.Info);
    }

    private void ExportToCsv()
    {
        Snackbar.Add("Exportação para CSV ainda não implementada.", Severity.Info);
    }

    private void ExportToPdf()
    {
        Snackbar.Add("Exportação para PDF ainda não implementada.", Severity.Info);
    }
}