@page "/users"

@using SIP.UI.Components.Dialogs.Users
@using SIP.UI.Domain.DTOs.Users
@using SIP.UI.Domain.DTOs.Users.Configurations
@using SIP.UI.Domain.Enums
@using SIP.UI.Domain.Helpers.DataFormatting.DateTimes
@using SIP.UI.Domain.Helpers.DataFormatting.Strings
@using SIP.UI.Domain.Services.Protocols
@using SIP.UI.Domain.Services.Users
@using SIP.UI.Models.Protocols
@using SIP.UI.Models.Sectors
@using SIP.UI.Models.Users
@using MudBlazor
@using MudBlazor.Utilities

@using static SIP.UI.Components.Dialogs.Users.UserChangePasswordDialog

@inject UserService _userService
@inject ProtocolService _protocolService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large" Class="my-8 px-4">

    <MudStack Row="true" AlignItems="AlignItems.Stretch" Class="mb-3 ml-3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddDialog" Class="@GetButtonClass()">
            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Medium" />
            <span class="button-text-label">Novo Usuário</span>
        </MudButton>
    </MudStack>

    <MudPaper Class="pa-4 ma-2" Elevation="1">

        <MudTable T="User" ServerData="LoadServerData" Dense="true" Hover="true" Bordered="false" @ref="table" RowsPerPage="pageSize" LoadingProgressColor="Color.Primary" SortLabel="sortLabel" Loading="@isLoading" Elevation="0" MultiSelection="true" @bind-SelectedItems="_selectedUsers">

            <ToolBarContent>

                <MudStack Style="width: 100%; margin-left: -0.75rem;" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @* Menu de Ações para usuários selecionados *@
                        @if (_selectedUsers.Any())
                        {
                            <MudTooltip Text="@($"Ações aplicáveis para {_selectedUsers.Count} usuário(s) selecionado(s)")" Arrow="true" Placement="Placement.Bottom">
                                <MudMenu Dense="true" Icon="@Icons.Material.Filled.SettingsApplications" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                                    @* Actions visible only when exactly ONE user is selected *@
                                    @if (_selectedUsers.Count == 1)
                                    {
                                        <MudMenuItem OnClick="@(() => ShowEditBasicDialog(_selectedUsers.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Editar</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ShowChangePasswordDialog(_selectedUsers.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Key" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Redefinir Senha</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ShowChangeSectorDialog(_selectedUsers.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Alterar Setor</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudDivider Class="my-2" />
                                        <MudMenuItem OnClick="@(() => ShowDeleteDialog(_selectedUsers.First()))" Style="color: var(--mud-palette-error);">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Excluir</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                    }
                                    @* Action visible only when MULTIPLE users are selected *@
                                    @if (_selectedUsers.Count > 1)
                                    {
                                        <MudMenuItem OnClick="ShowDeleteSelectedUsersDialog" Style="color: var(--mud-palette-error);">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Excluir</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </MudTooltip>
                        }
                    </MudStack>

                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudTextField T="string" ValueChanged="@OnSearch" Immediate="false" DebounceInterval="300" Placeholder="digite sua busca..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="m-auto" Clearable="true" Style="max-width: 300px;" />

                        @* Menu de Exportação - Always visible, not dependent on selection *@
                        <MudTooltip Text="Exportar para formatos compatíveis ..." Arrow="true" Placement="Placement.Bottom">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                                <MudMenuItem OnClick="ExportToCsv">Exportar CSV</MudMenuItem>
                                <MudMenuItem OnClick="ExportToPdf">Exportar PDF</MudMenuItem>
                            </MudMenu>
                        </MudTooltip>
                    </MudStack>

                </MudStack>

            </ToolBarContent>

            <HeaderContent>
                <MudTh></MudTh>
                <MudTh Style="font-weight: bold;">Status</MudTh>

                <MudTh Style="font-weight: bold;">Masp</MudTh>

                <MudTh Style="font-weight: bold;">
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object?>(x => x.Sector?.Acronym)">Secretaria</MudTableSortLabel>
                </MudTh>
                <MudTh Style="font-weight: bold;">
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x => x.FullName)">Nome</MudTableSortLabel>
                </MudTh>
                <MudTh Style="font-weight: bold;">Login</MudTh>
                <MudTh Style="font-weight: bold;">Email</MudTh>
            </HeaderContent>

            <RowTemplate Context="user">

                @if(user.Protocols.Count < 1)
                {
                    <MudTd>
                        <MudTooltip Text="Este usuário não possui protocolos cadastrados..." Arrow="true" Placement="Placement.Bottom">
                            <MudIconButton Icon="@Icons.Material.Outlined.Book" Color="Color.Primary" Size="Size.Small" Disabled="true" />
                        </MudTooltip>
                    </MudTd>
                }
                else 
                {
                    <MudTd>
                        <MudTooltip Text="Vizualizar protocolos ..." Arrow="true" Placement="Placement.Bottom">
                            <MudIconButton Icon="@(user.ShowProtocols? @Icons.Material.Filled.MenuBook : @Icons.Material.Outlined.Book)" Color="Color.Primary" Size="Size.Small" OnClick="@(() => ToggleShowProtocols(user))" />
                        </MudTooltip>
                    </MudTd>
                }

                <MudTd DataLabel="Status">
                    <MudTooltip Text="@(user.IsActive ? "Ativo" : "Inativo")" Arrow="true" Placement="Placement.Left">
                        <MudIcon Icon="@Icons.Material.Filled.Circle" Color="@(user.IsActive? Color.Success: Color.Error)" Size="Size.Small" />
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="MASP">@user.Masp</MudTd>
                <MudTd DataLabel="Secretaria">@user?.Sector?.Acronym.ToUppercase()</MudTd>
                <MudTd DataLabel="Nome">@user.FullName.ToUppercase()</MudTd>
                <MudTd DataLabel="Login">@user.Login</MudTd>
                <MudTd DataLabel="Email">@user.Email</MudTd>
            </RowTemplate>

            <ChildRowContent Context="userDetail">
                @if (userDetail.ShowProtocols)
                {
                    <MudTr>
                        <td colspan="8">
                            @* <-- colspan deve ser igual ao número total de colunas (7 + 1 do botão) *@
                            <MudCard Elevation="3" Class="ma-2">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudStack Row="true" AlignItems="AlignItems.Center">
                                            <MudText Typo="Typo.body1" Style="font-weight: bold;">Protocolos gerados por:</MudText>
                                            <MudText Typo="Typo.body1" Color="Color.Primary" Style="font-weight: bold;">@userDetail.FullName.ToUppercase()</MudText>
                                        </MudStack>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-0">
                                    <MudTable T="Protocol" Items="userDetail.Protocols" Bordered="false" Hover="true" Dense="true" Elevation="0">
                                        <HeaderContent>
                                            <MudTh Style="font-weight: bold;">Status</MudTh>
                                            <MudTh Style="font-weight: bold;">Número</MudTh>
                                            <MudTh Style="font-weight: bold;">Assunto</MudTh>
                                            <MudTh Style="font-weight: bold;">Data de Criação</MudTh>
                                        </HeaderContent>
                                        <RowTemplate Context="protocol">
                                            <MudTd DataLabel="Status">@GetStatusChip(protocol.Status)</MudTd>
                                            <MudTd DataLabel="Número">@protocol.Number</MudTd>
                                            <MudTd DataLabel="Assunto">@protocol.Subject.ToUppercase()</MudTd>
                                            <MudTd DataLabel="Data de Criação">@protocol.CreatedAt.ToBrasiliaTimeFormat()</MudTd>
                                        </RowTemplate>
                                        <NoRecordsContent>
                                            <MudText Class="pa-4">Nenhum protocolo vinculado a este usuário.</MudText>
                                        </NoRecordsContent>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>

            <NoRecordsContent>
                <MudText Class="pa-6 text-center mud-text-secondary">Nenhum usuário encontrado para exibir.</MudText>
            </NoRecordsContent>

            <LoadingContent>
                <MudText Class="pa-6 text-center mud-text-secondary">Carregando usuários, por favor aguarde...</MudText>
            </LoadingContent>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 15, 25, 50, 100 }" />
            </PagerContent>

        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private MudTable<User>? table;
    private bool isLoading = false;
    private int pageSize = 15;
    private int totalItems = 0;
    private string searchString = string.Empty;
    private string? lastSortLabel;
    private bool _isModalOpen = false;

    private HashSet<User> _selectedUsers = new();

    private RenderFragment GetStatusChip(ProtocolStatus status)
    {
        var (text, icon, color) = GetStatusDetails(status);
        return @<MudChip T="string" Label="true" Icon="@icon" Color="@color" Size="Size.Small" Class="rounded-md" Style="width: 6rem;justify-content: center;">@text</MudChip>;
    }

    private (string Text, string Icon, Color Color) GetStatusDetails(ProtocolStatus status) => status switch
    {
        ProtocolStatus.Open => ("Em Aberto", Icons.Material.Filled.FiberNew, Color.Primary),
        ProtocolStatus.SentForReview => ("Enviado", Icons.Material.Filled.Send, Color.Tertiary),
        ProtocolStatus.Received => ("Recebido", Icons.Material.Filled.MarkEmailRead, Color.Success),
        ProtocolStatus.UnderReview => ("Em Análise", Icons.Material.Filled.Search, Color.Warning),
        ProtocolStatus.Approved => ("Aprovado", Icons.Material.Filled.CheckCircle, Color.Success),
        ProtocolStatus.Rejected => ("Rejeitado", Icons.Material.Filled.Cancel, Color.Error),
        ProtocolStatus.CorrectionRequested => ("Correção", Icons.Material.Filled.Edit, Color.Warning),
        ProtocolStatus.Finalized => ("Finalizado", Icons.Material.Filled.DoneAll, Color.Dark),
        _ => ("Desconhecido", Icons.Material.Filled.HelpOutline, Color.Default)
    };

    private string GetButtonClass()
    {
        return $"mud-elevation-3 animated-fab-button-manual-icon {(_isModalOpen ? "force-expanded-button" : "")}";
    }

    protected override void OnInitialized() => 
        _selectedUsers.Clear();

    private async Task<TableData<User>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        isLoading = true;
        StateHasChanged();

        // Clear selection when data reloads to prevent stale selections
        _selectedUsers.Clear();

        pageSize = state.PageSize;
        string? sortLabel = state.SortLabel;

        if (string.IsNullOrWhiteSpace(sortLabel))
        {
            if (state.SortDirection != SortDirection.None)
                sortLabel = lastSortLabel ?? "FullName";
            else
                sortLabel = "FullName";
        }

        lastSortLabel = sortLabel;

        try
        {
            UserPagedResultDTO users = await _userService.GetPagedUsersAsync(
                state.Page + 1,
                state.PageSize,
                sortLabel,
                GetSortDirectionString(state.SortDirection),
                searchString);

            totalItems = await _userService.GetTotalUsersCountAsync(searchString);

            return new TableData<User>
                {
                    Items = users.Items,
                    TotalItems = users.TotalCount
                };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados: {ex.Message}", Severity.Error);
            return new TableData<User> { Items = [], TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetSortDirectionString(SortDirection direction) =>
        direction switch
        {
            SortDirection.Ascending => "asc",
            SortDirection.Descending => "desc",
            _ => string.Empty
        };

    /// <summary>
    /// Toggles the visibility of related protocols for a user.
    /// </summary>
    /// <param name="user">The sector to toggle.</param>
    private void ToggleShowProtocols(User user) => 
        user.ShowProtocols = !user.ShowProtocols;

    private async Task OnSearch(string value)
    {
        searchString = value;
        if (table is not null)
            await table.ReloadServerData();
    }

    private async Task ShowAddDialog()
    {
        _isModalOpen = true;

        DialogParameters<UserAddDialog> parameters = new();
        parameters.Add(x => x.User, new User { Id = Guid.Empty });
        IDialogReference dialog = await DialogService.ShowAsync<UserAddDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        _isModalOpen = false;

        if (result is not null && !result.Canceled)
        {
            User? savedUser = result.Data as User;

            if (savedUser != null)
            {
                try
                {
                    await _userService.CreateUserAsync(savedUser);
                    Snackbar.Add("Usuário criado com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao criar usuário: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Inserção de usuário cancelada.", Severity.Info);
        }
    }

    private async Task ShowEditBasicDialog(User userToEdit)
    {
        DialogParameters<UserEditDialog> parameters = new();

        User userForDialog = new()
            {
                Id = userToEdit.Id,
                FullName = userToEdit.FullName,
                Login = userToEdit.Login,
                Masp = userToEdit.Masp,
                Email = userToEdit.Email,
                Role = userToEdit.Role,
                IsActive = userToEdit.IsActive,
            };

        parameters.Add(x => x.User, userForDialog);

        IDialogReference dialog = await DialogService.ShowAsync<UserEditDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            User? updatedUser = result.Data as User;

            if (updatedUser != null)
            {
                try
                {
                    await _userService.UpdateUserAsync(updatedUser);

                    Snackbar.Add("Usuário atualizado com sucesso!", Severity.Success);

                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao atualizar usuário: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Erro: Não foi possível processar os dados retornados pelo formulário de edição.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Edição de usuário cancelada.", Severity.Info);
        }
    }

    private async Task ShowEditDialog(User user)
    {
        DialogParameters<UserEditDialog> parameters = new();
        parameters.Add(x => x.User, new User
            {
                Id = user.Id,
                FullName = user.FullName,
                Login = user.Login,
                Masp = user.Masp,
                Email = user.Email,
                Role = user.Role,
                IsActive = user.IsActive
            });

        IDialogReference dialog = await DialogService.ShowAsync<UserEditDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            User? updatedUser = result.Data as User;
            if (updatedUser != null)
            {
                try
                {
                    await _userService.UpdateUserAsync(updatedUser);
                    Snackbar.Add("Usuário atualizado com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao atualizar usuário: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Edição de usuário cancelada.", Severity.Info);
        }
    }

    private async Task ShowChangePasswordDialog(User user)
    {
        DialogParameters<UserChangePasswordDialog> parameters = new();

        parameters.Add(x => x.Users, new User { Id = user.Id, Login = user.Login });

        IDialogReference dialog = await DialogService.ShowAsync<UserChangePasswordDialog>("", parameters);
        DialogResult? result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            User? updatedUser = result.Data as User;
            if (updatedUser != null)
            {
                try
                {
                    await _userService.DefaultChangePasswordAsync(updatedUser.Id, updatedUser.PasswordHash);
                    Snackbar.Add("Senha alterada com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao alterar senha: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            Snackbar.Add("Alteração de senha cancelada.", Severity.Info);
        }
    }

    private void ShowChangeSectorDialog(User user)
    {
        if (user == null) return;
        Snackbar.Add($"Diálogo de mudança de setores para {user.FullName} ainda não implementado.", Severity.Info);
    }

    private async Task ShowDeleteDialog(User user)
    {
        DialogParameters<UserDeleteDialog> parameters = new();

        parameters.Add(x => x.UserToDelete, user);

        IDialogReference dialog = await DialogService.ShowAsync<UserDeleteDialog>("", parameters);

        DialogResult? result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                await _userService.DeleteUserAsync(user.Id);
                Snackbar.Add("Usuário excluído com sucesso!", Severity.Success);
                if (table is not null)
                    await table.ReloadServerData();
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add($"Erro ao excluir usuário: {ex.Message}", Severity.Error);
            }
            catch (HttpRequestException ex)
            {
                Snackbar.Add($"Erro de comunicação: {ex.Message}", Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Ocorreu um erro inesperado: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Exclusão de usuário cancelada.", Severity.Info);
        }

    }

    private void ShowDeleteSelectedUsersDialog()
    {
        Snackbar.Add("A Exclusão de múltiplos registros ainda não foi implementada.", Severity.Info);
    }

    private void ExportToCsv()
    {
        Snackbar.Add("Exportação para CSV ainda não implementada.", Severity.Info);
    }

    private void ExportToPdf()
    {
        Snackbar.Add("Exportação para PDF ainda não implementada.", Severity.Info);
    }
}