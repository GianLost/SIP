@page "/users"

@using SIP.UI.Components.Dialogs.Users
@using SIP.UI.Domain.DTOs.Users
@using SIP.UI.Domain.Services.Users
@using SIP.UI.Models.Users
@using MudBlazor
@using MudBlazor.Utilities
@using static SIP.UI.Components.Dialogs.Users.UserChangePasswordDialog

@inject UserService _userService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large" Class="my-8 px-4">

    <MudStack Row="true" AlignItems="AlignItems.Stretch" Class="mb-3 ml-3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddDialog" Class="@GetButtonClass()">
            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Medium" />
            <span class="button-text-label">Novo Usuário</span>
        </MudButton>
    </MudStack>

    <MudPaper Class="pa-4 ma-2" Elevation="1">
        <MudTable T="User" ServerData="LoadServerData" Dense="true" Hover="true" Bordered="false" @ref="table" RowsPerPage="pageSize" LoadingProgressColor="Color.Primary" SortLabel="sortLabel" Elevation="0" MultiSelection="true" @bind-SelectedItems="_selectedUsers">

            <ToolBarContent>

                <MudStack Style="width: 100%; margin-left: -0.75rem;" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @* Menu de Ações para usuários selecionados *@
                        @if (_selectedUsers.Any())
                        {
                            <MudTooltip Text="@($"Ações aplicáveis para {_selectedUsers.Count} usuário(s) selecionado(s)")" Arrow="true" Placement="Placement.Bottom">
                                <MudMenu Dense="true" Icon="@Icons.Material.Filled.SettingsApplications" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                                    @* Actions visible only when exactly ONE user is selected *@
                                    @if (_selectedUsers.Count == 1)
                                    {
                                        <MudMenuItem OnClick="@(() => ShowEditBasicDialog(_selectedUsers.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Editar</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ShowChangePasswordDialog(_selectedUsers.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Key" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Redefinir Senha</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => ShowChangeSectorDialog(_selectedUsers.First()))">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Alterar Setor</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                        <MudDivider Class="my-2" />
                                        <MudMenuItem OnClick="@(() => ShowDeleteDialog(_selectedUsers.First()))" Style="color: var(--mud-palette-error);">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Excluir</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                    }
                                    @* Action visible only when MULTIPLE users are selected *@
                                    @if (_selectedUsers.Count > 1)
                                    {
                                        <MudMenuItem OnClick="ShowDeleteSelectedUsersDialog" Style="color: var(--mud-palette-error);">
                                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                <MudText Typo="Typo.body2">Excluir</MudText>
                                            </MudStack>
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </MudTooltip>
                        }
                    </MudStack>

                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudTextField T="string" ValueChanged="@OnSearch" Immediate="false" DebounceInterval="300" Placeholder="digite sua busca..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="m-auto" Clearable="true" Style="max-width: 300px;" />

                        @* Menu de Exportação - Always visible, not dependent on selection *@
                        <MudTooltip Text="Exportar para formatos compatíveis ..." Arrow="true" Placement="Placement.Bottom">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                                <MudMenuItem OnClick="ExportToCsv">Exportar CSV</MudMenuItem>
                                <MudMenuItem OnClick="ExportToPdf">Exportar PDF</MudMenuItem>
                            </MudMenu>
                        </MudTooltip>
                    </MudStack>

                </MudStack>

            </ToolBarContent>

            <HeaderContent>
                <MudTh Style="font-weight: bold;">Status</MudTh>
                <MudTh Style="font-weight: bold;">Masp</MudTh>
                <MudTh Style="font-weight: bold;">
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x => x.FullName)">Nome</MudTableSortLabel>
                </MudTh>
                <MudTh Style="font-weight: bold;">Login</MudTh>
                <MudTh Style="font-weight: bold;">Email</MudTh>
            </HeaderContent>

            <RowTemplate Context="user">
                <MudTd DataLabel="Status">
                    <MudTooltip Text="@(user.IsActive ? "Ativo" : "Inativo")" Arrow="true" Placement="Placement.Left">
                        <MudIcon Icon="@Icons.Material.Filled.Circle" Color="@(user.IsActive? Color.Success: Color.Error)" Size="Size.Small" />
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="MASP">@user.Masp</MudTd>
                <MudTd DataLabel="Nome">@user.FullName</MudTd>
                <MudTd DataLabel="Login">@user.Login</MudTd>
                <MudTd DataLabel="Email">@user.Email</MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Class="pa-6 text-center mud-text-secondary">Nenhum usuário encontrado para exibir.</MudText>
            </NoRecordsContent>

            <LoadingContent>
                <MudText Class="pa-6 text-center mud-text-secondary">Carregando usuários, por favor aguarde...</MudText>
            </LoadingContent>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 15, 25, 50, 100 }" />
            </PagerContent>

        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private MudTable<User>? table;
    private bool isLoading = false;
    private int pageSize = 15;
    private int totalItems = 0;
    private string searchString = string.Empty;
    private string? lastSortLabel;
    private bool _isModalOpen = false;

    private HashSet<User> _selectedUsers = new HashSet<User>();

    private string GetButtonClass()
    {
        return $"mud-elevation-3 animated-fab-button-manual-icon {(_isModalOpen ? "force-expanded-button" : "")}";
    }

    protected override void OnInitialized() => _selectedUsers.Clear();

    private async Task<TableData<User>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        isLoading = true;
        StateHasChanged();

        // Clear selection when data reloads to prevent stale selections
        _selectedUsers.Clear();

        pageSize = state.PageSize;
        string? sortLabel = state.SortLabel;

        if (string.IsNullOrWhiteSpace(sortLabel))
        {
            if (state.SortDirection != SortDirection.None)
                sortLabel = lastSortLabel ?? "FullName";
            else
                sortLabel = "FullName";
        }

        try
        {
            UserPagedResultDTO users = await _userService.GetPagedUsersAsync(
                state.Page + 1,
                state.PageSize,
                sortLabel,
                GetSortDirectionString(state.SortDirection),
                searchString);

            totalItems = await _userService.GetTotalUsersCountAsync(searchString);

            return new TableData<User>
            {
                Items = users.Items,
                TotalItems = users.TotalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados: {ex.Message}", Severity.Error);
            return new TableData<User> { Items = [], TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetSortDirectionString(SortDirection direction) =>
        direction switch
        {
            SortDirection.Ascending => "asc",
            SortDirection.Descending => "desc",
            _ => string.Empty
        };

    private async Task OnSearch(string value)
    {
        searchString = value;
        if (table is not null)
            await table.ReloadServerData();
    }

    private async Task ShowAddDialog()
    {
        _isModalOpen = true;

        var parameters = new DialogParameters<UserAddDialog>();
        parameters.Add(x => x.User, new User { Id = Guid.Empty });
        var dialog = await DialogService.ShowAsync<UserAddDialog>("", parameters);
        var result = await dialog.Result;

        _isModalOpen = false;

        if (result is not null && !result.Canceled)
        {
            var savedUser = result.Data as User;
            if (savedUser != null)
            {
                try
                {
                    await _userService.CreateUserAsync(savedUser);
                    Snackbar.Add("Usuário criado com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao criar usuário: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private async Task ShowEditBasicDialog(User userToEdit)
    {
        var parameters = new DialogParameters<UserEditDialog>();

        var userForDialog = new User
        {
            Id = userToEdit.Id,
            FullName = userToEdit.FullName,
            Login = userToEdit.Login,
            Masp = userToEdit.Masp,
            Email = userToEdit.Email,
            Role = userToEdit.Role,
            IsActive = userToEdit.IsActive,
        };

        parameters.Add(x => x.User, userForDialog);

        var dialog = await DialogService.ShowAsync<UserEditDialog>("", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            var updatedUser = result.Data as User;

            if (updatedUser != null)
            {
                try
                {
                    await _userService.UpdateUserAsync(updatedUser);

                    Snackbar.Add("Usuário atualizado com sucesso!", Severity.Success);

                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao atualizar usuário: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Erro: Não foi possível processar os dados retornados pelo formulário de edição.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Edição de usuário cancelada.", Severity.Info);
        }
    }

    private async Task ShowEditDialog(User user)
    {
        var parameters = new DialogParameters<UserEditDialog>();
        parameters.Add(x => x.User, new User
        {
            Id = user.Id,
            FullName = user.FullName,
            Login = user.Login,
            Masp = user.Masp,
            Email = user.Email,
            Role = user.Role,
            IsActive = user.IsActive
        });

        var dialog = await DialogService.ShowAsync<UserEditDialog>("", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            var updatedUser = result.Data as User;
            if (updatedUser != null)
            {
                try
                {
                    await _userService.UpdateUserAsync(updatedUser);
                    Snackbar.Add("Usuário atualizado com sucesso!", Severity.Success);
                    if (table is not null)
                        await table.ReloadServerData();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao atualizar usuário: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private async Task ShowChangePasswordDialog(User user)
    {
        var parameters = new DialogParameters<UserChangePasswordDialog>();

        // Certifique-se de que 'x.User' está correto (singular) e não 'x.Users'
        parameters.Add(x => x.Users, new User { Id = user.Id, FullName = user.FullName });

        var dialog = await DialogService.ShowAsync<UserChangePasswordDialog>("", parameters); // Adicionei um título
        var result = await dialog.Result;

        // Primeiro, verifica se o resultado do diálogo não é nulo e não foi cancelado.
        if (result is not null && !result.Canceled)
        {
            // Tenta fazer o cast para o DTO UserChangePasswordResult.
            // Se result.Data for null ou de um tipo incompatível, passwordResult será null.
            var passwordResult = result.Data as UserChangePasswordResult;

            // Agora, verifica se o cast foi bem-sucedido e o objeto não é null.
            if (passwordResult is not null) // <-- AQUI ESTÁ A VERIFICAÇÃO DE NULO QUE REMOVE OS WARNINGS
            {
                Guid userId = passwordResult.UserId;
                string newPassword = passwordResult.NewPassword;

                try
                {
                    // Descomente e use seu serviço de usuário real
                    // await _userService.ResetUserPasswordAsync(userId, newPassword);
                    Snackbar.Add("Senha redefinida com sucesso!", Severity.Success);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Erro ao redefinir senha: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                // Opcional: Lidar com o caso em que result.Data não é do tipo esperado
                Snackbar.Add("Erro interno: O formato dos dados retornados pelo diálogo é inválido.", Severity.Error);
            }
        }
    }

    // private async Task ShowChangeSectorDialog(User user)
    // {
    //      var parameters = new DialogParameters<UserChangeSectorDialog>();
    //      // Passe o usuário completo para o diálogo de setor para pré-selecionar o setor atual
    //      parameters.Add(x => x.Users, new User { Id = user.Id, FullName = user.FullName, SectorId = user.SectorId, SelectedSector = user.SelectedSector });

    //      var dialog = await DialogService.ShowAsync<UserChangeSectorDialog>($"Alterar Setor - {user.FullName}", parameters);
    //      var result = await dialog.Result;

    //      if (result is not null && !result.Canceled)
    //      {
    //          // O resultado é um objeto anônimo com UserId e NewSectorId
    //          dynamic data = result.Data;
    //          Guid userId = data.UserId;
    //          int newSectorId = data.NewSectorId;

    //          try
    //          {
    //              // Você precisará de um método no seu UserService para alterar o setor
    //              await _userService.ChangeUserSectorAsync(userId, newSectorId);
    //              Snackbar.Add("Setor alterado com sucesso!", Severity.Success);
    //              await table.ReloadServerData(); // Recarregar para refletir a mudança de setor na tabela
    //          }
    //          catch (Exception ex)
    //          {
    //              Snackbar.Add($"Erro ao alterar setor: {ex.Message}", Severity.Error);
    //          }
    //      }
    // }

    private void ShowChangeSectorDialog(User user)
    {
        if (user == null) return;
        Snackbar.Add($"Diálogo de mudança de setores para {user.FullName} ainda não implementado.", Severity.Info);
    }

    private async Task ShowDeleteDialog(User user)
    {
        var parameters = new DialogParameters<UserDeleteDialog>();
        parameters.Add(x => x.UserToDelete, user);

        var dialog = await DialogService.ShowAsync<UserDeleteDialog>("", parameters); // Adicionado título
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                await _userService.DeleteUserAsync(user.Id);
                Snackbar.Add("Usuário excluído com sucesso!", Severity.Success);
                if (table is not null)
                    await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao excluir usuário: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ShowDeleteSelectedUsersDialog()
    {
        Snackbar.Add("A Exclusão de múltiplos registros ainda não foi implementada.", Severity.Info);
    }

    private void ExportToCsv()
    {
        Snackbar.Add("Exportação para CSV ainda não implementada.", Severity.Info);
    }

    private void ExportToPdf()
    {
        Snackbar.Add("Exportação para PDF ainda não implementada.", Severity.Info);
    }
}