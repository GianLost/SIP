@using SIP.UI.Models.Users

@* Diálogo para redefinir senha do usuário *@
<MudDialog MaxWidth="false" FullWidth="false" Style="width:450px">
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">
            <MudGrid Spacing="2">
                <MudText HorizontalAlign="@HorizontalAlignment.Start" Class="ml-3" Typo="Typo.h6" HtmlTag="span">
                    Redefinir Senha para:
                    <MudText Color="Color.Primary" Typo="Typo.h6" HtmlTag="span">@Users.FullName</MudText>
                </MudText>

                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewPassword"
                                  Label="Nova Senha"
                                  Variant="Variant.Outlined" Margin="Margin.Normal"
                                  InputType="InputType.Password"
                                  Required="true" RequiredError="A nova senha é obrigatória!"
                                  For="@(() => NewPassword)" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="ConfirmPassword"
                                  Label="Confirmar Senha"
                                  Variant="Variant.Outlined" Margin="Margin.Normal"
                                  InputType="InputType.Password"
                                  Required="true" RequiredError="A confirmação de senha é obrigatória!"
                                  For="@(() => ConfirmPassword)"
                                  Validation="@(new Func<string, string>(ValidateConfirmPassword))" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Class="justify-end pa-4" FullWidth="true">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">
                Redefinir Senha
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancelar</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public User Users { get; set; } = new User();

    private MudForm? form;
    private bool isValid;
    private string NewPassword { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        // Certifique-se de que o usuário tem um valor para FullName
        if (Users == null)
        {
            Users = new User();
        }
        else if (string.IsNullOrEmpty(Users.FullName))
        {
            Users.FullName = "N/A"; // Ou carregue o nome completo se necessário
        }
    }

    private void OnErrorsChanged()
    {
        // MudBlazor já gerencia a invalidação/revalidação quando erros mudam.
        // Chamar StateHasChanged() aqui é necessário para que o botão desabilite/habilite
        // ou para que as mensagens de erro apareçam.
        StateHasChanged();
    }

    private string ValidateNewPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "A nova senha é obrigatória.";
        }
        if (value.Length < 6)
        {
            return "A senha deve ter no mínimo 6 caracteres.";
        }
        // Se a confirmação de senha já tiver sido digitada, force uma revalidação dela.
        // Isso é importante para que a mensagem "senhas não conferem" apareça/desapareça.
        if (!string.IsNullOrEmpty(ConfirmPassword) && NewPassword != ConfirmPassword)
        {
            // Você pode forçar a validação de um campo específico ou do formulário.
            // form?.Validate(); // Poderia causar loop se não for cuidadoso.
        }
        return string.Empty; // Válido
    }

    private string ValidateConfirmPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "A confirmação de senha é obrigatória.";
        }
        if (value != NewPassword)
        {
            return "As senhas não conferem.";
        }
        return string.Empty; // Válido
    }

    private void Submit()
    {
        // Força a validação de todos os campos do formulário antes de submeter
        form!.Validate();

        if (isValid)
        {
            MudDialog.Close(DialogResult.Ok(new UserChangePasswordResult { UserId = Users.Id, NewPassword = NewPassword }));
        }
    }

    private void Cancel() => MudDialog.Cancel();

    // Definição do DTO para retorno do diálogo
    public class UserChangePasswordResult
    {
        public Guid UserId { get; set; }
        public string NewPassword { get; set; } = string.Empty;
    }
}