@using SIP.UI.Domain.Services.Users
@using SIP.UI.Models.Users

@inject UserService UserService

@* Diálogo para redefinir senha do usuário *@
<MudDialog MaxWidth="false" FullWidth="false" Style="width:450px">
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">
            <MudGrid Spacing="2">
                <MudText HorizontalAlign="@HorizontalAlignment.Start" Class="ml-3" Typo="Typo.h6" HtmlTag="span">
                    Redefinir Senha para:
                    <MudText Color="Color.Primary" Typo="Typo.h6" HtmlTag="span">@Users.Login</MudText>
                </MudText>

                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewPassword"
                    Label="Nova Senha"
                    Variant="Variant.Outlined" Margin="Margin.Normal"
                    InputType="InputType.Password"
                    Required="true" RequiredError="A nova senha é obrigatória!"
                    For="@(() => NewPassword)" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="ConfirmPassword"
                    Label="Confirmar Senha"
                    Variant="Variant.Outlined" Margin="Margin.Normal"
                    InputType="InputType.Password"
                    Required="true" RequiredError="A confirmação de senha é obrigatória!"
                    For="@(() => ConfirmPassword)"
                    Validation="@(new Func<string, string>(ValidateConfirmPassword))" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Class="justify-end pa-4" FullWidth="true">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">
                Redefinir Senha
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancelar</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public User Users { get; set; } = new User();

    @inject UserService UserService // Injeção do seu serviço
    @inject ISnackbar SnackbarService

    private MudForm? form;
    private bool isValid;
    private string NewPassword { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (Users == null)
            Users = new User();
    }

    private string ValidateNewPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "A nova senha é obrigatória.";

        return string.Empty;
    }

    private string ValidateConfirmPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "A confirmação de senha é obrigatória.";
        }
        if (value != NewPassword)
        {
            return "As senhas não conferem.";
        }
        return string.Empty;
    }

    private void OnErrorsChanged() => StateHasChanged();

    private async Task Submit()
    {
        await form!.Validate();

        if (isValid)
        {
            try
            {
                bool isSuccess = await UserService.DefaultChangePasswordAsync(Users.Id, NewPassword);

                if (isSuccess)
                {
                    SnackbarService.Add($"A senha do usuário '{Users.Login}' foi redefinida com sucesso!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    SnackbarService.Add("Erro ao redefinir senha. Verifique os dados e tente novamente.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                SnackbarService.Add($"Ocorreu um erro inesperado: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    // Definição do DTO para retorno do diálogo
    public class UserChangePasswordResult
    {
        public Guid UserId { get; set; }
        public string NewPassword { get; set; } = string.Empty;
    }
}