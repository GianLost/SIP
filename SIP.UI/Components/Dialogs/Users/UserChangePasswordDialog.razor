@using SIP.UI.Domain.DTOs.Users.Configurations
@using SIP.UI.Domain.Services.Users
@using SIP.UI.Models.Users

@inject ISnackbar SnackbarService
@inject UserService UserService

<MudDialog Style="max-width: 26.5rem; width: 26.5rem; height: auto;"
           Class="elevation-4 rounded-xl dialog-flush-header"
           Gutters="false">

    <TitleContent>
        <div class="custom-dialog-header">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.LockReset" Size="Size.Large" />
                <MudText Typo="Typo.h5" Class="font-bold">
                    Redefinição de Senha
                </MudText>
            </MudStack>
        </div>
    </TitleContent>

    <DialogContent>
        <MudStack Justify="Justify.Center" Class="pa-5" Spacing="3" Style="min-height: 200px;">
            <MudText Style="text-wrap: nowrap;" Class="m-auto" Typo="Typo.body2" Color="Color.Inherit">
                Defina uma nova senha para o usuário
                <MudText Typo="Typo.subtitle2" Color="Color.Primary" Class="font-semibold" Inline="true">
                    @Users.Login
                </MudText>
            </MudText>
            <MudForm Class="pass-form" @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">
                <MudStack Spacing="3">
                    <MudTextField T="string"
                                  @bind-Value="Users.Password"
                                  Label="Nova Senha"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="@(showNewPassword ? InputType.Text : InputType.Password)"
                                  Required="true"
                                  RequiredError="A nova senha é obrigatória!"
                                  For="@(() => Users.Password)"
                                  Validation="(string value) => ValidateNewPassword(value)"
                                  OnBlur="() => form!.Validate()"
                                  Adornment="Adornment.End"
                                  IconSize="Size.Small"
                                  AdornmentIcon="@(showNewPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)" 
                                  OnAdornmentClick="ToggleNewPasswordVisibility" />

                    <MudTextField @bind-Value="ConfirmPassword"
                                  Label="Confirmar Senha"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  InputType="@(showConfirmPassword? InputType.Text: InputType.Password)"
                                  Required="true"
                                  RequiredError="A confirmação de senha é obrigatória!"
                                  For="@(() => ConfirmPassword)"
                                  Validation="(string value) => ValidateConfirmPassword(value)"
                                  OnBlur="() => form!.Validate()"
                                  Adornment="Adornment.End"
                                  IconSize="Size.Small"
                                  AdornmentIcon="@(showConfirmPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)" 
                                  OnAdornmentClick="ToggleConfirmPasswordVisibility" />
                </MudStack>
            </MudForm>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudStack Class="dialog-actions-custom" Row="true" Justify="Justify.FlexEnd" Spacing="2">
            <MudButton OnClick="Submit"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Disabled="!isValid"
                       Size="Size.Medium"
                       StartIcon="@Icons.Material.Filled.CheckCircle"
                       Class="elevation-2 px-4">
                Redefinir
            </MudButton>

            <MudButton OnClick="Cancel"
                       Color="Color.Error"
                       Variant="Variant.Outlined"
                       Size="Size.Medium"
                       StartIcon="@Icons.Material.Filled.Cancel"
                       Class="elevation-1 px-4">
                Cancelar
            </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

<style>
    .dialog-flush-header .mud-dialog-title {
        padding: 0.75rem !important;
    }

    .custom-dialog-header {
        padding: 0.5rem;
        background: var(--mud-palette-primary);
        margin-bottom: -1rem !important;
        color: white;
        border-radius: 0.8rem;
    }


    .dialog-actions-custom {
        padding-left: 0 !important;
        padding-right: 0 !important;
        padding-bottom: 1.5rem !important;
        margin-left: 0 !important; /* gruda na margem esquerda */
        margin-right: auto !important; /* empurra para esquerda */
        width: 19.5rem; /* opcional: se quiser alinhar com inputs */
    }

    .font-semibold {
        font-weight: 600;
    }

    .pass-form {
        width: 20rem !important;
        margin: auto;
    }
</style>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public UserDefaultChangePasswordDTO Users { get; set; } = new();

    private MudForm? form;
    private bool isValid;
    private bool showNewPassword;
    private bool showConfirmPassword;
    private string ConfirmPassword { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (Users == null)
            Users = new UserDefaultChangePasswordDTO();
    }

    private void ToggleNewPasswordVisibility() => showNewPassword = !showNewPassword;
    private void ToggleConfirmPasswordVisibility() => showConfirmPassword = !showConfirmPassword;

    private string? ValidateNewPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "A nova senha é obrigatória.";
        return null;
    }

    private string? ValidateConfirmPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "A confirmação de senha é obrigatória.";
        if (value != Users.Password)
            return "As senhas não conferem.";
        return null;
    }

    private void OnErrorsChanged() => StateHasChanged();

    private async Task Submit()
    {
        await form!.Validate();
        if (isValid)
        {
            try
            {
                bool isSuccess = await UserService.DefaultChangePasswordAsync(Users.Id, Users.Password);
                if (isSuccess)
                {
                    SnackbarService.Add($"A senha do usuário '{Users.Login}' foi redefinida com sucesso!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    SnackbarService.Add("Erro ao redefinir senha. Verifique os dados e tente novamente.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                SnackbarService.Add($"Ocorreu um erro inesperado: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}