@using SIP.UI.Domain.DTOs.Users.Configurations
@using SIP.UI.Domain.Services.Users
@using SIP.UI.Models.Users

@inject ISnackbar SnackbarService
@inject UserService UserService

<MudDialog Style="width:450px">

    @* Conteúdo do diálogo *@
    <DialogContent>

        @* Formulário de redefinição de senha *@
        <MudForm @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">

            <MudGrid Spacing="2">

                @* Texto de cabeçalho indicando o login do usuário alvo *@
                <MudText Class="ml-3" Typo="Typo.h6" HtmlTag="span">
                    Redefinir Senha para:
                    <MudText Color="Color.Primary" Typo="Typo.h6" HtmlTag="span">@Users.Login</MudText>
                </MudText>

                @* Campo para nova senha *@
                <MudItem xs="12" sm="12">
                    <MudTextField T="string"
                                  @bind-Value="Users.Password"
                                  Label="Nova Senha"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  InputType="@(showNewPassword ? InputType.Text : InputType.Password)"
                                  Required="true"
                                  RequiredError="A nova senha é obrigatória!"
                                  For="@(() => Users.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(showNewPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                  OnAdornmentClick="ToggleNewPasswordVisibility" />
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudTextField @bind-Value="ConfirmPassword"
                                  Label="Confirmar Senha"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Normal"
                                  InputType="@(showConfirmPassword? InputType.Text: InputType.Password)"
                                  Required="true"
                                  RequiredError="A confirmação de senha é obrigatória!"
                                  For="@(() => ConfirmPassword)"
                                  Validation="@(new Func<string, string>(ValidateConfirmPassword))"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(showConfirmPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                  OnAdornmentClick="ToggleConfirmPasswordVisibility" />
                </MudItem>
            </MudGrid>

        </MudForm>

    </DialogContent>

    @* Botões de ação *@
    <DialogActions>
        <MudStack Row="true" Class="justify-end pa-4">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">
                Redefinir Senha
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">
                Cancelar
            </MudButton>
        </MudStack>
    </DialogActions>

</MudDialog>

@code {

    /// <summary>
    /// A instância do diálogo do MudBlazor para controlar ações como confirmar ou cancelar.
    /// </summary>
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    /// <summary>
    /// O usuário cuja senha será redefinida.
    /// Recebido como parâmetro do componente pai.
    /// </summary>
    [Parameter]
    public UserDefaultChangePasswordDTO Users { get; set; } = new();

    /// <summary>
    /// Referência ao formulário do MudBlazor para validação.
    /// </summary>
    private MudForm? form;

    /// <summary>
    /// Indica se o formulário é válido e controla a habilitação do botão "Redefinir Senha".
    /// </summary>
    private bool isValid;

    /// <summary>
    /// Flag que controla a visibilidade do campo "Nova Senha".
    /// Quando true, a senha é exibida em texto; quando false, é exibida como senha (oculta).
    /// </summary>
    private bool showNewPassword;

    /// <summary>
    /// Flag que controla a visibilidade do campo "Confirmar Senha".
    /// Quando true, a confirmação é exibida em texto; quando false, é exibida como senha (oculta).
    /// </summary>
    private bool showConfirmPassword;
    
    /// <summary>
    /// Valor digitado no campo "Nova Senha".
    /// </summary>
    private string NewPassword { get; set; } = string.Empty;

    /// <summary>
    /// Valor digitado no campo "Confirmar Senha".
    /// </summary>
    private string ConfirmPassword { get; set; } = string.Empty;

    /// <summary>
    /// Inicializa o componente garantindo que a instância do usuário não seja nula.
    /// </summary>
    protected override void OnInitialized()
    {
        if (Users == null)
            Users = new UserDefaultChangePasswordDTO();
    }

    /// <summary>
    /// Alterna a visibilidade do campo "Nova Senha".
    /// </summary>
    private void ToggleNewPasswordVisibility() =>
        showNewPassword = !showNewPassword;

    /// <summary>
    /// Alterna a visibilidade do campo "Confirmar Senha".
    /// </summary>
    private void ToggleConfirmPasswordVisibility() =>
        showConfirmPassword = !showConfirmPassword;

    /// <summary>
    /// Valida o campo "Nova Senha".
    /// </summary>
    /// <param name="value">Valor digitado no campo de senha.</param>
    /// <returns>Mensagem de erro se inválido, string vazia se válido.</returns>
    private string ValidateNewPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "A nova senha é obrigatória.";

        return string.Empty;
    }

    /// <summary>
    /// Valida o campo "Confirmar Senha".
    /// </summary>
    /// <param name="value">Valor digitado no campo de confirmação.</param>
    /// <returns>Mensagem de erro se inválido, string vazia se válido.</returns>
    private string ValidateConfirmPassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "A confirmação de senha é obrigatória.";

        if (value != NewPassword)
            return "As senhas não conferem.";

        return string.Empty;
    }

    /// <summary>
    /// Executado sempre que a lista de erros do formulário é alterada.
    /// Responsável por atualizar a UI.
    /// </summary>
    private void OnErrorsChanged() =>
        StateHasChanged();

    /// <summary>
    /// Valida o formulário e, se válido, executa a redefinição da senha via serviço.
    /// Exibe feedback ao usuário e fecha o diálogo em caso de sucesso.
    /// </summary>
    private async Task Submit()
    {
        await form!.Validate();

        if (isValid)
        {
            try
            {
                bool isSuccess = await UserService.DefaultChangePasswordAsync(Users.Id, NewPassword);

                if (isSuccess)
                {
                    SnackbarService.Add($"A senha do usuário '{Users.Login}' foi redefinida com sucesso!", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    SnackbarService.Add("Erro ao redefinir senha. Verifique os dados e tente novamente.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                SnackbarService.Add($"Ocorreu um erro inesperado: {ex.Message}", Severity.Error);
            }
        }
    }

    /// <summary>
    /// Cancela a operação e fecha o diálogo sem aplicar alterações.
    /// </summary>
    private void Cancel() =>
        MudDialog.Cancel();

    /// <summary>
    /// DTO utilizado para encapsular o resultado de redefinição de senha do diálogo.
    /// </summary>
    public class UserChangePasswordResult
    {
        /// <summary>
        /// Identificador único do usuário cuja senha foi alterada.
        /// </summary>
        public Guid UserId { get; set; }

        /// <summary>
        /// Nova senha atribuída ao usuário.
        /// </summary>
        public string NewPassword { get; set; } = string.Empty;
    }

}