@using SIP.UI.Domain.Enums
@using SIP.UI.Domain.Services.Sectors
@using SIP.UI.Models.Sectors
@using SIP.UI.Models.Users
@using MudBlazor

@inject SectorService _sectorServices
@inject ISnackbar Snackbar

<MudDialog Style="width:600px">

    @* Conteúdo do diálogo *@
    <DialogContent>

        @* Formulário de adição *@
        <MudForm @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">

            <MudGrid Spacing="2">

                @* Campo MASP *@
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.Masp" Label="Masp" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.ConfirmationNumber" Required="true" RequiredError="O MASP é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>

                @* Campo nome completo *@
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.FullName" Label="Nome Completo" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.PeopleOutline" Required="true" RequiredError="O nome é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>

                @* Campo login *@
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.Login" Label="Login" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.People" Required="true" RequiredError="O login é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>

                @* Campo email *@
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.Email" Label="Email" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" Required="true" RequiredError="O email é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>

                @* Campos de Senha e Confirmação de Senha (presentes na adição) *@
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.PasswordHash" Label="Senha" InputType="InputType.Password"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password"
                                  Required="true" RequiredError="A senha é obrigatória!"
                                  Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="ConfirmPassword" Label="Confirmar Senha" InputType="InputType.Password"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Password"
                                  Required="true" RequiredError="A confirmação de senha é obrigatória!"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordMatchValidation))"
                                  Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>

                @* Caixa de seleção para selecionar o setor do usuário *@
                <MudItem xs="12" sm="6">
                    <MudSelect T="Sector" Label="Setor" @bind-Value="selectedSector" Required="true" Dense="true" RequiredError="Selecione um setor!" Variant="Variant.Outlined" Margin="Margin.Normal">
                        @if (_allSectors != null)
                        {
                            @foreach (var sector in _allSectors)
                            {
                                <MudSelectItem Value="sector">@sector.Acronym - @sector.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>

                @* Caixa de seleção para selecionar o nível de acesso do usuário *@
                <MudItem xs="12" sm="6">
                    <MudSelect T="RoleEnum" Label="Função (Role)" @bind-Value="User.Role" Required="true" Dense="true" RequiredError="Selecione uma função!" Variant="Variant.Outlined" Margin="Margin.Normal">
                        @foreach (RoleEnum role in Enum.GetValues(typeof(RoleEnum)))
                        {
                            <MudSelectItem Value="role">@GetRoleDisplayName(role)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

            </MudGrid>

        </MudForm>

    </DialogContent>

    @* Botões de ação *@
    <DialogActions>
        <MudStack Row="true" Class="justify-end pa-4">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">
                Salvar
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">
                Cancelar
            </MudButton>
        </MudStack>
    </DialogActions>

</MudDialog>

@code {

    /// <summary>
    /// A instância do diálogo do MudBlazor para controlar as ações do diálogo.
    /// É injetada automaticamente pelo framework.
    /// </summary>
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    /// <summary>
    /// O objeto de usuário que será adicionado ou editado.
    /// Este parâmetro é passado pelo componente pai.
    /// </summary>
    [Parameter]
    public User User { get; set; } = new();

    /// <summary>
    /// Lista completa de setores disponíveis, usada para popular o dropdown de seleção de setor.
    /// É carregada pelo serviço de setores e passada pelo componente pai.
    /// </summary>
    [Parameter]
    public ICollection<Sector>? _allSectors { get; set; }

    /// <summary>
    /// Referência para o formulário do MudBlazor.
    /// Permite disparar manualmente a validação de todos os campos.
    /// </summary>
    private MudForm? form;

    /// <summary>
    /// Flag que indica se o formulário é válido.
    /// Controla a habilitação do botão "Salvar".
    /// </summary>
    private bool isValid;

    /// <summary>
    /// Armazena o setor selecionado pelo usuário no formulário.
    /// </summary>
    private Sector? selectedSector;

    /// <summary>
    /// Valor de confirmação da senha, usado para validar se a senha digitada corresponde.
    /// </summary>
    private string ConfirmPassword { get; set; } = string.Empty;

    /// <summary>
    /// Executado ao inicializar o componente.
    /// Responsável por carregar os setores e preparar o formulário.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (_sectorServices is not null)
            _allSectors = await _sectorServices.GetAllSectorsAsync() ?? new List<Sector>();

        if (_allSectors != null && !_allSectors.Any())
        {
            Snackbar.Add(
                "Não foi possível carregar a lista de setores. O cadastro de usuários pode não funcionar corretamente.",
                severity: Severity.Warning
            );
        }

        if (User.PasswordHash != null)
            User.PasswordHash = string.Empty;

        ConfirmPassword = string.Empty;

        StateHasChanged();
    }

    /// <summary>
    /// Retorna o nome de exibição amigável para cada função (RoleEnum).
    /// </summary>
    /// <param name="role">O valor do enum RoleEnum.</param>
    /// <returns>O nome legível da função correspondente.</returns>
    private string GetRoleDisplayName(RoleEnum role)
    {
        return role switch
        {
            RoleEnum.Common => "Leitor",
            RoleEnum.SectorManager => "Gestor",
            RoleEnum.Admin => "Administrador",
            _ => role.ToString() // Caso haja um novo enum sem mapeamento, exibe o nome padrão
        };
    }

    /// <summary>
    /// Valida se a senha e a confirmação de senha correspondem.
    /// </summary>
    /// <param name="confirmPasswordValue">Valor digitado no campo de confirmação.</param>
    /// <returns>Mensagens de erro caso as senhas não coincidam.</returns>
    private IEnumerable<string> PasswordMatchValidation(string confirmPasswordValue)
    {
        if (string.IsNullOrEmpty(confirmPasswordValue))
        {
            yield return "A confirmação de senha é obrigatória!";
            yield break;
        }

        if (confirmPasswordValue != User.PasswordHash)
            yield return "As senhas não correspondem!";
    }

    /// <summary>
    /// Executado sempre que a lista de erros do formulário é alterada.
    /// Atualiza a interface do usuário.
    /// </summary>
    private void OnErrorsChanged() => 
        StateHasChanged();

    /// <summary>
    /// Executa a validação do formulário.
    /// Se válido, atribui o setor selecionado ao usuário e
    /// fecha o diálogo retornando o objeto User.
    /// </summary>
    private async Task Submit()
    {
        await form!.Validate();

        if (isValid && selectedSector != null)
        {
            User.SectorId = selectedSector.Id;

            User.Sector = selectedSector;

            MudDialog.Close(DialogResult.Ok(User));
        }
    }

    /// <summary>
    /// Cancela a operação e fecha o diálogo sem salvar alterações.
    /// </summary>
    private void Cancel() => 
        MudDialog.Cancel();
}