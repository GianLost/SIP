@using SIP.UI.Domain.Enums
@using SIP.UI.Domain.Services.Sectors
@using SIP.UI.Models.Sectors
@using SIP.UI.Models.Users
@using MudBlazor

@inject SectorService _sectorServices
@inject ISnackbar Snackbar

<MudDialog Style="width:600px">

    <DialogContent>

        @* Formulário com os campos de edição básica *@
        <MudForm @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">

            <MudGrid Spacing="2">

                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.Masp" Label="Masp" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.ConfirmationNumber" Required="true" RequiredError="O MASP é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.FullName" Label="Nome Completo" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.PeopleOutline" Required="true" RequiredError="O nome é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.Login" Label="Login" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.People" Required="true" RequiredError="O login é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="User.Email" Label="Email" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" Required="true" RequiredError="O email é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>


                @* Checkbox para ativar/inativar o usuário com label dinâmico *@
                <MudItem xs="12" sm="6" Class="m-0">
                    <MudCheckBox Size="Size.Small" @bind-Value="User.IsActive" Color="@Color.Primary"> @(User.IsActive == true ? "Desativar" : "Ativar")</MudCheckBox>
                </MudItem>

                <MudItem xs="12" sm="6" Class="m-0">
                    <MudSelect T="RoleEnum" Label="Função (Role)" @bind-Value="User.Role" Required="true" Dense="true" RequiredError="Selecione uma função!" Variant="Variant.Outlined" Margin="Margin.Normal">
                        @foreach (RoleEnum role in Enum.GetValues(typeof(RoleEnum)))
                        {
                            <MudSelectItem Value="role">@GetRoleDisplayName(role)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

            </MudGrid>

        </MudForm>

    </DialogContent>

    <DialogActions>
        <MudStack Row="true" Class="justify-end pa-4">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">
                Salvar
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancelar</MudButton>
        </MudStack>
    </DialogActions>

</MudDialog>

@code {
    // Parâmetro em cascata para controlar a instância do diálogo (fechar, cancelar).
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    // Parâmetro para receber o objeto do usuário (novo ou para edição).
    [Parameter]
    public User User { get; set; } = new();

    // Referência ao componente MudForm para acionar a validação.
    private MudForm? form;

    // Flag que indica se o formulário é válido. Habilita/desabilita o botão "Salvar".
    private bool isValid;

    /// <summary>
    /// Called when form errors change to update the UI.
    /// </summary>
    private void OnErrorsChanged() => 
        StateHasChanged();

    /// <summary>
    /// Retorna o nome de exibição personalizado para cada UserRole.
    /// </summary>
    /// <param name="role">O valor do UserRole.</param>
    /// <returns>A string de exibição correspondente.</returns>
    private string GetRoleDisplayName(RoleEnum role)
    {
        return role switch
        {
            RoleEnum.Common => "Leitor",
            RoleEnum.SectorManager => "Gestor",
            RoleEnum.Admin => "Administrador",
            _ => role.ToString() // Caso haja um novo enum sem mapeamento, exibe o nome padrão
        };
    }

    /// <summary>
    /// Valida o formulário e, se for válido, fecha o diálogo retornando os dados.
    /// </summary>
    private async Task Submit()
    {
        // Força a validação de todos os campos do formulário.
        await form!.Validate();

        // Se o formulário for válido e um setor tiver sido selecionado...
        if (isValid)
        {
            await form!.Validate();

            if (isValid)
                MudDialog.Close(DialogResult.Ok(User));
        }
    }

    /// <summary>
    /// Cancela a operação e fecha o diálogo sem salvar.
    /// </summary>
    private void Cancel() => 
        MudDialog.Cancel();
}