@using SIP.UI.Models.Protocols
@using SIP.UI.Models.Users
@using SIP.UI.Models.Sectors
@using SIP.UI.Domain.Services.Sectors
@using SIP.UI.Domain.Services.Users
@using SIP.UI.Domain.Enums
@using MudBlazor

@inject SectorService SectorService
@inject UserService UserService
@inject ISnackbar Snackbar

<MudDialog Style="width:600px">
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="isValid" Model="_protocol">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="_protocol.Number" Label="Número" For="() => _protocol.Number" Required="true" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="_protocol.Subject" Label="Assunto" For="() => _protocol.Subject" Required="true" Variant="Variant.Outlined" Margin="Margin.Normal" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudAutocomplete T="Sector"
                                     @bind-Value="SelectedSector"
                                     Label="Setor de Destino"
                                     SearchFunc="SearchSectors"
                                     For="() => SelectedSector"
                                     Required="true"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Normal"
                                     ToStringFunc="@(s => s == null ? null : $"{s.Name} ({s.Acronym})")"
                                     Clearable="true"
                                     Placeholder="Pesquisar setor..."
                                     MaxItems="int.MaxValue"/>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudAutocomplete T="User"
                                     @bind-Value="SelectedUser"
                                     Label="Criado Por"
                                     SearchFunc="SearchUsers"
                                     For="() => SelectedUser"
                                     Required="true"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Normal"
                                     Clearable="true"
                                     Placeholder="Pesquisar usuário..."
                                     ToStringFunc="@(u => u?.FullName)"
                                     Disabled="SelectedSector is null"
                                     MaxItems="int.MaxValue" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect T="ProtocolStatus" Label="Status" @bind-Value="_protocol.Status" For="() => _protocol.Status" Required="true" Variant="Variant.Outlined" Margin="Margin.Normal">
                        @foreach (ProtocolStatus status in Enum.GetValues(typeof(ProtocolStatus)))
                        {
                            <MudSelectItem Value="status">@GetStatusDisplayName(status)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" Class="m-0">
                    <MudCheckBox Size="Size.Small" @bind-Value="_protocol.IsArchived" Color="@Color.Primary"> @(_protocol.IsArchived == true ? "Desarquivar" : "Arquivar")</MudCheckBox>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Class="justify-end pa-4">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">Salvar</MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancelar</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Protocol Protocol { get; set; } = new();

    private MudForm? form;
    private bool isValid;

    private Protocol _protocol = new();

    private List<Sector> Sectors = new();
    private List<User> AllUsers = new();

    private Sector? _selectedSector;
    private User? SelectedUser;

    private Sector? SelectedSector
    {
        get => _selectedSector;
        set
        {
            if (_selectedSector != value)
            {
                _selectedSector = value;
                SelectedUser = null;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _protocol = new Protocol
            {
                Id = Protocol.Id,
                Number = Protocol.Number,
                Subject = Protocol.Subject,
                DestinationSectorId = Protocol.DestinationSectorId,
                CreatedById = Protocol.CreatedById,
                Status = Protocol.Status,
                IsArchived = Protocol.IsArchived
            };

        ICollection<Sector>? sectorsResult = await SectorService.GetAllSectorsAsync();
        Sectors = sectorsResult?.ToList() ?? new List<Sector>();

        var usersResult = await UserService.GetAllUsersAsync();
        AllUsers = usersResult?.ToList() ?? new List<User>();

        if (_protocol.DestinationSectorId != Guid.Empty)
        {
            SelectedSector = Sectors.FirstOrDefault(s => s.Id == _protocol.DestinationSectorId);
        }

        if (_protocol.CreatedById != Guid.Empty)
        {
            SelectedUser = AllUsers.FirstOrDefault(u => u.Id == _protocol.CreatedById);
        }
    }

    private Task<IEnumerable<Sector>> SearchSectors(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult<IEnumerable<Sector>>(Sectors);

        return Task.FromResult(Sectors.Where(s => s.Name.Contains(value, StringComparison.OrdinalIgnoreCase) || s.Acronym.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    private Task<IEnumerable<User>> SearchUsers(string value, CancellationToken cancellationToken)
    {
        if (SelectedSector is null)
            return Task.FromResult(Enumerable.Empty<User>());

        var usersFilteredBySector = AllUsers.Where(u => u.SectorId == SelectedSector.Id);

        if (string.IsNullOrEmpty(value))
            return Task.FromResult(usersFilteredBySector);

        return Task.FromResult(usersFilteredBySector.Where(u => u.FullName.Contains(value, StringComparison.OrdinalIgnoreCase)));
    }

    /// <summary>
    /// Retorna o nome de exibição personalizado para cada status.
    /// </summary>
    /// <param name="status">O valor do status.</param>
    /// <returns>A string de exibição correspondente.</returns>
    private string GetStatusDisplayName(ProtocolStatus status)
    {
        return status switch
        {
            ProtocolStatus.Open => "Aberto",
            ProtocolStatus.SentForReview => "Eviado p/ rev.",
            ProtocolStatus.Received => "Recebido",
            ProtocolStatus.UnderReview => "Em revisão",
            ProtocolStatus.Approved => "Aprovado",
            ProtocolStatus.Rejected => "Rejeitado",
            ProtocolStatus.CorrectionRequested => "Solicitação de correção",
            ProtocolStatus.Finalized => "Finalizado",
            _ => status.ToString()
        };
    }

    private async Task Submit()
    {
        await form!.Validate();

        if (!isValid) return;

        if (SelectedSector is null || SelectedUser is null)
        {
            Snackbar.Add("Por favor, selecione o setor de destino e o criador.", Severity.Warning);
            return;
        }

        _protocol.DestinationSectorId = SelectedSector.Id;
        _protocol.CreatedById = SelectedUser.Id;

        MudDialog.Close(DialogResult.Ok(_protocol));
    }

    private void Cancel() => MudDialog.Cancel();
}