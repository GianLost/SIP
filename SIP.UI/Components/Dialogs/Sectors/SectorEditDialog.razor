@using SIP.UI.Models.Sectors
@using MudBlazor

@* Diálogo para edição de setor*@
<MudDialog MaxWidth="false" FullWidth="false" Style="width:450px">

    <DialogContent>

        @* Formulário com os campos de edição *@
        <MudForm @ref="form" @bind-IsValid="isValid" ErrorsChanged="OnErrorsChanged">

            <MudTextField @bind-Value="Sector.Name" Label="Nome da Secretaria" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Business" Required="true" RequiredError="O nome da secretaria é obrigatório!" Variant="Variant.Outlined" Margin="Margin.Normal" />

            <MudTextField @bind-Value="Sector.Acronym" Label="Sigla" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.ShortText" Required="true" RequiredError="A sigla é obrigatória!" Variant="Variant.Outlined" Margin="Margin.Normal" />

            <MudTextField @bind-Value="Sector.Phone" Label="Telefone" Mask="@PhoneMask" MaskChar="_" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Phone" Variant="Variant.Outlined" Margin="Margin.Normal" Placeholder="(XX) XXXXX-XXXX" HelperText="Formato: (DDD) 9XXXX-XXXX ou (DDD) XXXX-XXXX" Validation="@((string arg) => IsValidPhoneNumber(arg) ? null : "Telefone inválido. Use (DDD) 9XXXX-XXXX ou (DDD) XXXX-XXXX.")" Required="true" RequiredError="O telefone é obrigatório!" />

        </MudForm>

    </DialogContent>

    <DialogActions>

        @* Componente com os botões editar e cancelar *@
        <MudStack Row="true" Class="justify-end pa-4" FullWidth="true">
            <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!isValid" Class="mr-3">
                Salvar
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancelar</MudButton>
        </MudStack>

    </DialogActions>

</MudDialog>

@code {

    /// <summary>
    /// The MudBlazor dialog instance for controlling dialog actions.
    /// </summary>
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; } = default!;

    /// <summary>
    /// The sector being edited in the dialog.
    /// </summary>
    [Parameter] 
    public Sector Sector { get; set; } = new Sector();

    /// <summary>
    /// Reference to the MudForm component.
    /// </summary>
    private MudForm? form;

    /// <summary>
    /// Indicates if the form is currently valid.
    /// </summary>
    private bool isValid = false;

    /// <summary>
    /// MultiMask for phone number input, detects mobile and landline formats.
    /// </summary>
    MultiMask PhoneMask = new MultiMask("(00) 00000-0000",
        new MaskOption("Celular", "(00) 00000-0000", @"^\(\d{2}\) 9"),
        new MaskOption("Fixo", "(00) 0000-0000", @"^\(\d{2}\) [2-8]")
    );

    /// <summary>
    /// Called when form errors change to update the UI.
    /// </summary>
    private void OnErrorsChanged() => StateHasChanged();

    /// <summary>
    /// Validates the form and closes the dialog with the sector data if valid.
    /// </summary>
    private async Task Submit()
    {
        await form!.Validate();

        if (isValid)
            MudDialog.Close(DialogResult.Ok(Sector));
    }

    /// <summary>
    /// Cancels the dialog without saving changes.
    /// </summary>
    private void Cancel() => MudDialog.Cancel();

    /// <summary>
    /// Validates the phone number format (accepts mobile and landline).
    /// </summary>
    /// <param name="phone">Phone number string to validate.</param>
    /// <returns>True if valid, otherwise false.</returns>
    private bool IsValidPhoneNumber(string? phone)
    {
        if (string.IsNullOrWhiteSpace(phone)) return false;
            var digits = new string(phone.Where(char.IsDigit).ToArray());

        // Accepts (XX) XXXX-XXXX or (XX) 9XXXX-XXXX
        return digits.Length == 10 || digits.Length == 11;
    }
}